Volumes proide read-write capability in a container.
A read-write layer on top of readonly layers of the container image.
It resided within container, not in the image or OS.

Work01
temp folder, stored the data temprorarily
feedback folder, stored the data permenantly

docker build . -t datavol01.1  
docker run -p 8080:80 -d --name feedback-form --rm datavol01.1

The above folders will move to docker image and store data there, not to your local disk :)
    The file can be reached after you stop/start container
    The file will be lost in case container is destroyed

How to sort out the problem [survive data incase container destroyed] - Dcoker Volumes :)

Work02
- docker volume

modified lines 39 and 40 in server.js to avoid crash

docker build . -t datavol01.volumes
docker run -p 8080:80 -d --name feedback-form --rm datavol01.volumes

in browser "http://localhost:8080"
in browser enter "test" into titlw and some info into document text
now try "http://localhost:8080/test.txt" and you will see the file content from within container inside the browser

Find out the docker named volume mapped locally while a container is running

docker volume ls

creating named volumes to survive data

1. No need of VOLUME [ "/app/feedback" ] in the Dockerfile, you can delete It
2. We will map volumes while starting docker container

delete previous image
docker build . -t datavol01.volumes
docker run -p 8080:80 -d --name feedback-form -v feedback:/app/feedback  --rm datavol01.volumes
make few entries with "test" Title and make a note
run docker volume ls            You will see the volume locally 
docker stop feedback-form       stop the docker container
run docker volume ls            You will still see the volume locally  (thats why its called named volume)

now again start your container with different name
docker run -p 8080:80 -d --name feedback-test -v feedback:/app/feedback  --rm datavol01.volumes
in browser type "http://localhost:8080/test.txt"    You will get it back :)
docker volume ls        will show you volume named "feedback"
docker volume rm VOL_NAME or
docker volume prune


Work03
- chnages in code to reflect in running container (bind-mounts)

volumes are managed by docker and we dont know location. In bind mounts developer assigns the path on local machine
You can bind a single file or a complete folder using below syntax
Ensure that container have access to the path of bind mounts that you provide. You can do it in dockerdesktop/preferences/resources/file sharing and confirm the path is present.


docker run -p 8080:80 -d --name feedback-test -v feedback:/app/feedback  --rm datavol01.volumes - ABSOLUTE_PATH:/app feedbacl-node:volumes


docker run -p 8080:80 -d --name feedback-test01 -v feedback:/app/feedback  --rm datavol01.volumes -v "/g/My Drive/mine/TFTraining/Dockers/data-volumes/Work02/:/app" feedback-node:volumes
run w/o -rm to troubelshoot
docker run -p 8080:80 -d --name feedback-test01 -v feedback:/app/feedback  datavol01.volumes -v "/g/My Drive/mine/TFTraining/Dockers/data-volumes/Work02/:/app" feedback-node:volumes
docker run -p 8080:80 -d --name feedback-test01 -v feedback:/app/feedback   datavol01.volumes -v "%cd%:/app" feedback-node:volumes

The problem is since you are trying to add binding while running container, it overwrites everything in /app folder inside the container launched from the image.
Use anonymous volume in pattern /app/node_modules, it will surivive as the longest path win rule of docker filesystem
moreover, the /app/node_modules is created by npm install in Docekrfile and stores dependencies so it should be protected.

docker build -t feedback-node:volumes .

bind mount in read-write mode
docker run -d -p 8080:80 --name feedback-form -v feedback:/app/feedback  -v "/g/My Drive/mine/TFTraining/Dockers/data-volumes/Work03/:/app" -v /app/node_modules feedback-node:volumes

bind mount in readonly mode
docker run -d -p 8080:80 --name feedback-form -v feedback:/app/feedback  -v "/g/My Drive/mine/TFTraining/Dockers/data-volumes/Work03/:/app:ro" -v /app/node_modules feedback-node:volumes


make it easy
============
docker run -v /app/data                 Anonymous Volume
docker run -v data:/app/data            Named volume
docker run -v /code/path:/app/code      Bind mount


S#           Anonymous Volumes                                  Named Volume                                        Bind mounts
--          ------------------                                  -------------                                       ------------
1.          Container specific                                  General, not tied to any container                  Located on host filesystem, not tied to specific container
2.          Surive container shutdown/restart except --rm       Same as anonynmous, removal via Docker CLI          Same as both, removal on host fs needed
3.          Cross container sharing not possible                Shared across containers                            Shared across containers
4.          Can not be re-used                                  Can be re-used for same container across restart    Can be re-used for same container across restart
5           docker run -v /app/data                             docker run -v data:/app/data                        docker run -v /code/path:/app/code


Work04
======
--- Suitable for dvelopment only, its interacting with the code not for production ---

Since we already have volumes, lets diable COPY in Docekrfile and run again
docker build -t feedback-work:no-copy .
docker run -d -p 8080:80 --name feedback-form -v feedback:/app/feedback  -v "/g/My Drive/mine/TFTraining/Dockers/data-volumes/Work04/:/app" -v /app/node_modules -v /app/temp  feedback-work:no-copy

if you run into some trouble restart the docker desktop. It will resolve any errors except JS specific.

Use .dockerignore to let files being ignore from COPY command in DokcerFile